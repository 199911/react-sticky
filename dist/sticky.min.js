(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Sticky = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = (typeof window !== "undefined" ? window['React'] : typeof global !== "undefined" ? global['React'] : null);

var _react2 = _interopRequireDefault(_react);

var _sticky = require('./sticky');

var _sticky2 = _interopRequireDefault(_sticky);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Container = function (_React$Component) {
  _inherits(Container, _React$Component);

  function Container(props) {
    _classCallCheck(this, Container);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Container).call(this, props));

    _this.state = {
      paddingTopCorrection: 0
    };
    return _this;
  }

  _createClass(Container, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({ node: ReactDOM.findDOMNode(this) });
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return { container: this };
    }
  }, {
    key: 'setPaddingTopCorrection',
    value: function setPaddingTopCorrection(paddingTopCorrection) {
      this.setState({ paddingTopCorrection: paddingTopCorrection });
    }
  }, {
    key: 'render',
    value: function render() {
      var style = (0, _utils.copy)({}, this.props.style || {});

      if (this.state.node) {
        var paddingTop = style.paddingTop || parseInt(this.state.node.style.paddingTop) || 0;
        style.paddingTop = paddingTop + this.state.paddingTopCorrection;
      }

      return _react2.default.createElement(
        'div',
        _extends({}, this.props, { style: style }),
        this.props.children
      );
    }
  }]);

  return Container;
}(_react2.default.Component);

Container.childContextTypes = {
  container: _react2.default.PropTypes.any
};

exports.default = Container;
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./sticky":2,"./utils":3}],2:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = (typeof window !== "undefined" ? window['React'] : typeof global !== "undefined" ? global['React'] : null);

var _react2 = _interopRequireDefault(_react);

var _reactDom = (typeof window !== "undefined" ? window['ReactDOM'] : typeof global !== "undefined" ? global['ReactDOM'] : null);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _watcher = require('./watcher');

var _watcher2 = _interopRequireDefault(_watcher);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Sticky = function (_React$Component) {
  _inherits(Sticky, _React$Component);

  _createClass(Sticky, null, [{
    key: 'instancesAbove',


    /*
     * Return every Sticky instance that is
     * positioned above the supplied instance.
     */
    value: function instancesAbove(instance) {
      // var instances = [];
      // var allAbove = Sticky.__instances.slice(0, Sticky.__instances.indexOf(instance));
      // for (var i = 0; i < allAbove.length; i++) {
      //   var above = allAbove[i];
      //   if (above.container.contains(instance.container)) instances.push(above);
      // }
      return [];
    }
  }]);

  function Sticky(props) {
    _classCallCheck(this, Sticky);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Sticky).call(this, props));

    _this.state = {};
    return _this;
  }

  /*
   * Return the distance of the scrollbar from the
   * top of the window plus the total height of all
   * stuck Sticky instances above this one.
   */


  _createClass(Sticky, [{
    key: 'pageOffset',
    value: function pageOffset() {
      return (window.pageYOffset || document.documentElement.scrollTop) + this.otherStickyOffset();
    }
  }, {
    key: 'otherStickyOffset',
    value: function otherStickyOffset() {
      var otherStickies = Sticky.instancesAbove(this);

      var offset = 0;
      for (var i = 0; i < otherStickies.length; i++) {
        var otherSticky = otherStickies[i];
        if (otherSticky.state.isSticky) {
          offset += otherSticky.domNode.getBoundingClientRect().height;
        }
      }
      return offset;
    }

    /*
     * Returns the y-coordinate of the top of this element.
     */

  }, {
    key: 'calculateOrigin',
    value: function calculateOrigin(node) {
      node = node || this.node;

      if (this.lastWidth !== window.innerWidth || this.lastHeight !== window.innerHeight) {
        this.lastWidth = window.innerWidth;
        this.lastHeight = window.innerHeight;
        var previousPosition = node.style.position;
        node.style.position = '';
        node.style.position;
        this.origin = node.getBoundingClientRect().top + this.pageOffset();
        node.style.position = previousPosition;
        return this.origin;
      } else {
        return this.origin;
      }
    }

    /*
     * Returns true/false depending on if this should be sticky.
     */

  }, {
    key: 'shouldBeSticky',
    value: function shouldBeSticky() {
      var offset = this.pageOffset();
      var origin = this.calculateOrigin();

      var stickyTopConditionsMet = offset >= origin + this.props.topOffset;
      var stickyBottomConditionsMet = offset < this.containerNode.getBoundingClientRect().height + origin - this.node.getBoundingClientRect().height;
      return stickyTopConditionsMet && stickyBottomConditionsMet;
    }
  }, {
    key: 'transition',
    value: function transition() {
      if (this.containerNode) {
        this.nextState(this.shouldBeSticky());
      }
    }

    /*
     * Anytime new props are received, force re-evaluation
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      _watcher2.default.emit();
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(props, state, context) {
      this.container = context.container;
      this.containerNode = _reactDom2.default.findDOMNode(this.container);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.node = _reactDom2.default.findDOMNode(this);
      _watcher2.default.on(this.transition.bind(this));
      _watcher2.default.emit();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _watcher2.default.off(this.transition.bind(this));
    }

    /*
     * If sticky, merge this.props.stickyStyle with this.props.style.
     * If not, just return this.props.style.
     */

  }, {
    key: 'nextStyle',
    value: function nextStyle(shouldBeSticky) {
      if (shouldBeSticky) {
        // inherit the boundaries of the container
        var rect = (this.containerNode || document.body).getBoundingClientRect();
        var style = (0, _utils.copy)({}, this.props.style);
        style.position = 'fixed';
        style.left = rect.left;
        style.width = rect.width;
        style.top = this.otherStickyOffset();

        // Finally, override the best-fit style with any user props
        return (0, _utils.copy)(style, this.props.stickyStyle);
      } else {
        return this.props.style;
      }
    }

    /*
     * If sticky, merge this.props.stickyClass with this.props.className.
     * If not, just return this.props.className.
     */

  }, {
    key: 'nextClassName',
    value: function nextClassName(shouldBeSticky) {
      var className = this.props.className;
      if (shouldBeSticky) {
        className += ' ' + this.props.stickyClass;
      }
      return className;
    }

    /*
     * Transition to the next state.
     *
     * Updates the isSticky, style, and className state
     * variables.
     *
     * If sticky state is different than the previous,
     * fire the onStickyStateChange callback.
     */

  }, {
    key: 'nextState',
    value: function nextState(shouldBeSticky) {
      var hasChanged = this.state.isSticky !== shouldBeSticky;
      this.setState({
        isSticky: shouldBeSticky,
        style: this.nextStyle(shouldBeSticky),
        className: this.nextClassName(shouldBeSticky)
      });
      if (hasChanged) {
        this.correctBounce(shouldBeSticky);
        this.props.onStickyStateChange(shouldBeSticky);
      }
    }
  }, {
    key: 'correctBounce',
    value: function correctBounce(shouldBeSticky) {
      var bounceCorrection = undefined;
      if (shouldBeSticky) {
        bounceCorrection = this.bounceCorrection = Math.ceil(this.node.getBoundingClientRect().height);
      } else {
        bounceCorrection = -this.bounceCorrection || 0;
      }
      if (this.container) this.container.setPaddingTopCorrection(bounceCorrection);
    }

    /*
     * The special sauce.
     */

  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { style: this.state.style, className: this.state.className },
        this.props.children
      );
    }
  }]);

  return Sticky;
}(_react2.default.Component);

Sticky.contextTypes = {
  container: _react2.default.PropTypes.any
};

/*
 * Default properties...
 */
Sticky.defaultProps = {
  className: '',
  style: {},
  stickyClass: 'sticky',
  stickyStyle: {},
  topOffset: 0,
  onStickyStateChange: function onStickyStateChange() {}
};

exports.default = Sticky;
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./utils":3,"./watcher":4}],3:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.findStickies = findStickies;

var _react = (typeof window !== "undefined" ? window['React'] : typeof global !== "undefined" ? global['React'] : null);

var _sticky = require('./sticky');

var _sticky2 = _interopRequireDefault(_sticky);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function copy(dest, source) {
  for (var rule in source) {
    dest[rule] = source[rule];
  };
  return dest;
}

function findStickies(children) {
  var found = [];
  children.forEach(function (child) {
    if (child.type === _sticky2.default) found.push(child);
  });
  return found;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./sticky":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _simpleSignal = require('simple-signal');

var _simpleSignal2 = _interopRequireDefault(_simpleSignal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var state = {
  hasUnhandledEvent: false,
  hasTouchEvent: false
};

var signal = new _simpleSignal2.default();

/**
  * Wire up event listeners
  */
['scroll', 'resize', 'touchmove', 'touchend'].forEach(function (evt) {
  if (window.addEventListener) {
    window.addEventListener(evt, handleEvent);
  } else {
    window.attachEvent('on' + evt, handleEvent);
  }
});

// Start the loop
(0, _raf2.default)(function tick() {
  if (state.hasUnhandledEvent || state.hasTouchEvent) {
    signal.emit();
    state.hasUnhandledEvent = false;
  }
  (0, _raf2.default)(tick);
});

function handleEvent(event) {
  switch (event.type) {
    case 'touchmove':
      state.hasTouchEvent = true;
      break;
    case 'touchend':
      state.hasTouchEvent = false;
      break;
    default:
      state.hasUnhandledEvent = true;
  }
}

exports.default = signal;
module.exports = exports['default'];

},{"raf":8,"simple-signal":9}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sticky = require('./sticky');

var _sticky2 = _interopRequireDefault(_sticky);

var _container = require('./container');

var _container2 = _interopRequireDefault(_container);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_sticky2.default.Container = _container2.default;

exports.default = _sticky2.default;
module.exports = exports['default'];

},{"./container":1,"./sticky":2}],6:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

}).call(this,require('_process'))

},{"_process":7}],7:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],8:[function(require,module,exports){
(function (global){
var now = require('performance-now')
  , root = typeof window === 'undefined' ? global : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix]
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
}
module.exports.cancel = function() {
  caf.apply(root, arguments)
}
module.exports.polyfill = function() {
  root.requestAnimationFrame = raf
  root.cancelAnimationFrame = caf
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"performance-now":6}],9:[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports["default"] = Signal;

function Signal() {
  var subscribers = [];
  return {
    on: function on(fn) {
      subscribers.push(fn);
    },
    off: function off(fn) {
      var index = subscribers.indexOf(fn);
      if (index > -1) {
        subscribers.splice(index, 1);
      }
    },
    emit: function emit(val) {
      for (var i = 0, len = subscribers.length; i < len; ++i) {
        subscribers[i](val);
      }
    }
  };
}

module.exports = exports["default"];
},{}]},{},[5])(5)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
